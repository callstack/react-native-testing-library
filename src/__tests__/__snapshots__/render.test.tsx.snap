// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`debug 1`] = `
"<View>
  <Text>
    Is the banana fresh?
  </Text>
  <Text
    testID="bananaFresh"
  >
    not fresh
  </Text>
  <TextInput
    placeholder="Add custom freshness"
    testID="bananaCustomFreshness"
    value="Custom Freshie"
  />
  <TextInput
    defaultValue="What did you inspect?"
    placeholder="Who inspected freshness?"
    testID="bananaChef"
    value="I inspected freshie"
  />
  <TextInput
    defaultValue="What banana?"
  />
  <TextInput
    defaultValue="hello"
    value=""
  />
  <View
    accessible={true}
    collapsable={false}
    focusable={true}
    onBlur={[Function onBlur]}
    onClick={[Function onClick]}
    onFocus={[Function onFocus]}
    onResponderGrant={[Function onResponderGrant]}
    onResponderMove={[Function onResponderMove]}
    onResponderRelease={[Function onResponderRelease]}
    onResponderTerminate={[Function onResponderTerminate]}
    onResponderTerminationRequest={[Function onResponderTerminationRequest]}
    onStartShouldSetResponder={[Function onStartShouldSetResponder]}
  >
    <Text>
      Change freshness!
    </Text>
  </View>
  <Text
    testID="duplicateText"
  >
    First Text
  </Text>
  <Text
    testID="duplicateText"
  >
    Second Text
  </Text>
  <Text>
    0
  </Text>
</View>"
`;

exports[`debug changing component: bananaFresh button message should now be "fresh" 1`] = `
"<View>
  <Text>
    Is the banana fresh?
  </Text>
  <Text
    testID="bananaFresh"
  >
    fresh
  </Text>
  <TextInput
    placeholder="Add custom freshness"
    testID="bananaCustomFreshness"
    value="Custom Freshie"
  />
  <TextInput
    defaultValue="What did you inspect?"
    placeholder="Who inspected freshness?"
    testID="bananaChef"
    value="I inspected freshie"
  />
  <TextInput
    defaultValue="What banana?"
  />
  <TextInput
    defaultValue="hello"
    value=""
  />
  <View
    accessible={true}
    collapsable={false}
    focusable={true}
    onBlur={[Function onBlur]}
    onClick={[Function onClick]}
    onFocus={[Function onFocus]}
    onResponderGrant={[Function onResponderGrant]}
    onResponderMove={[Function onResponderMove]}
    onResponderRelease={[Function onResponderRelease]}
    onResponderTerminate={[Function onResponderTerminate]}
    onResponderTerminationRequest={[Function onResponderTerminationRequest]}
    onStartShouldSetResponder={[Function onStartShouldSetResponder]}
  >
    <Text>
      Change freshness!
    </Text>
  </View>
  <Text
    testID="duplicateText"
  >
    First Text
  </Text>
  <Text
    testID="duplicateText"
  >
    Second Text
  </Text>
  <Text>
    0
  </Text>
</View>"
`;

exports[`debug: shallow 1`] = `
"<View>
  <Text>
    Is the banana fresh?
  </Text>
  <Text
    testID="bananaFresh"
  >
    not fresh
  </Text>
  <TextInput
    placeholder="Add custom freshness"
    testID="bananaCustomFreshness"
    value="Custom Freshie"
  />
  <TextInput
    defaultValue="What did you inspect?"
    placeholder="Who inspected freshness?"
    testID="bananaChef"
    value="I inspected freshie"
  />
  <TextInput
    defaultValue="What banana?"
  />
  <TextInput
    defaultValue="hello"
    value=""
  />
  <MyButton
    onPress={[Function anonymous]}
    type="primary"
  >
    Change freshness!
  </MyButton>
  <Text
    testID="duplicateText"
  >
    First Text
  </Text>
  <Text
    testID="duplicateText"
  >
    Second Text
  </Text>
  <Text>
    0
  </Text>
</View>"
`;

exports[`debug: shallow with message 1`] = `
"my other custom message

<View>
  <Text>
    Is the banana fresh?
  </Text>
  <Text
    testID="bananaFresh"
  >
    not fresh
  </Text>
  <TextInput
    placeholder="Add custom freshness"
    testID="bananaCustomFreshness"
    value="Custom Freshie"
  />
  <TextInput
    defaultValue="What did you inspect?"
    placeholder="Who inspected freshness?"
    testID="bananaChef"
    value="I inspected freshie"
  />
  <TextInput
    defaultValue="What banana?"
  />
  <TextInput
    defaultValue="hello"
    value=""
  />
  <MyButton
    onPress={[Function anonymous]}
    type="primary"
  >
    Change freshness!
  </MyButton>
  <Text
    testID="duplicateText"
  >
    First Text
  </Text>
  <Text
    testID="duplicateText"
  >
    Second Text
  </Text>
  <Text>
    0
  </Text>
</View>"
`;

exports[`debug: with message 1`] = `
"my custom message

<View>
  <Text>
    Is the banana fresh?
  </Text>
  <Text
    testID="bananaFresh"
  >
    not fresh
  </Text>
  <TextInput
    placeholder="Add custom freshness"
    testID="bananaCustomFreshness"
    value="Custom Freshie"
  />
  <TextInput
    defaultValue="What did you inspect?"
    placeholder="Who inspected freshness?"
    testID="bananaChef"
    value="I inspected freshie"
  />
  <TextInput
    defaultValue="What banana?"
  />
  <TextInput
    defaultValue="hello"
    value=""
  />
  <View
    accessible={true}
    collapsable={false}
    focusable={true}
    onBlur={[Function onBlur]}
    onClick={[Function onClick]}
    onFocus={[Function onFocus]}
    onResponderGrant={[Function onResponderGrant]}
    onResponderMove={[Function onResponderMove]}
    onResponderRelease={[Function onResponderRelease]}
    onResponderTerminate={[Function onResponderTerminate]}
    onResponderTerminationRequest={[Function onResponderTerminationRequest]}
    onStartShouldSetResponder={[Function onStartShouldSetResponder]}
  >
    <Text>
      Change freshness!
    </Text>
  </View>
  <Text
    testID="duplicateText"
  >
    First Text
  </Text>
  <Text
    testID="duplicateText"
  >
    Second Text
  </Text>
  <Text>
    0
  </Text>
</View>"
`;

exports[`it should throw 
      - when one of the children is a text
      - and the parent is not a Text component 1`] = `
"Invariant Violation: Text strings must be rendered within a <Text> component.

Detected attempt to render "hello" string within a <View> component."
`;

exports[`it should throw 
    - when a string is rendered within a fragment rendered outside a Text 1`] = `
"Invariant Violation: Text strings must be rendered within a <Text> component.

Detected attempt to render "hello" string within a <View> component."
`;

exports[`it should throw if a number is rendered outside a text: 
    "Invariant Violation: Text strings must be rendered within a <Text> component.

    Detected attempt to render "0" string within a <View> component."
   1`] = `
"Invariant Violation: Text strings must be rendered within a <Text> component.

Detected attempt to render "0" string within a <View> component."
`;

exports[`it should throw when rendering string in a View in a Text 1`] = `
"Invariant Violation: Text strings must be rendered within a <Text> component.

Detected attempt to render "hello" string within a <View> component."
`;

exports[`should throw an error when rerendering with text outside of Text component 1`] = `
"Invariant Violation: Text strings must be rendered within a <Text> component.

Detected attempt to render "hello" string within a <View> component."
`;

exports[`should throw an error when strings are rendered outside Text 1`] = `
"Invariant Violation: Text strings must be rendered within a <Text> component.

Detected attempt to render "text rendered outside text component" string within a <View> component."
`;

exports[`should throw when rendering a string outside a text component 1`] = `
"Invariant Violation: Text strings must be rendered within a <Text> component.

Detected attempt to render "hello" string within a <View> component."
`;

exports[`toJSON 1`] = `
<View
  accessible={true}
  collapsable={false}
  focusable={true}
  onBlur={[Function]}
  onClick={[Function]}
  onFocus={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
>
  <Text>
    press me
  </Text>
</View>
`;
