"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([["9322"],{3513:function(e,n,i){i.r(n),i.d(n,{default:()=>a});var s=i(5893),t=i(65);function r(e){let n=Object.assign({h1:"h1",a:"a",div:"div",p:"p",code:"code",h2:"h2",h3:"h3",h4:"h4",pre:"pre",strong:"strong"},(0,t.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"migration-to-12x",children:["Migration to 12.x",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#migration-to-12x",children:"#"})]}),"\n",(0,s.jsxs)(n.div,{className:"rspress-directive info",children:[(0,s.jsx)(n.div,{className:"rspress-directive-title",children:"INFO"}),(0,s.jsxs)(n.div,{className:"rspress-directive-content",children:["\n",(0,s.jsxs)(n.p,{children:["If you are already using legacy ",(0,s.jsx)(n.code,{children:"@testing-library/jest-native"})," Jest Matchers, we have a ",(0,s.jsx)(n.a,{href:"/docs/migration/jest-matchers",children:"migration guide"})," for moving to the built-in matchers."]}),"\n"]})]}),"\n",(0,s.jsxs)(n.p,{children:["React Native Testing Library 12 introduces a handful of breaking changes compared to 11.x versions. We believe they were necessary to improve the experience using the library and help the users ",(0,s.jsx)(n.a,{href:"https://blog.codinghorror.com/falling-into-the-pit-of-success/",target:"_blank",rel:"noopener noreferrer",children:"fall into the pit of success"})," when writing meaningful tests. You will find migration instructions for each and every change described below."]}),"\n",(0,s.jsxs)(n.h2,{id:"breaking-changes",children:["Breaking changes",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#breaking-changes",children:"#"})]}),"\n",(0,s.jsxs)(n.h3,{id:"1-all-queries-exclude-elements-hidden-from-accessibility-by-default",children:["1. All queries exclude elements hidden from accessibility by default",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-all-queries-exclude-elements-hidden-from-accessibility-by-default",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["Elements that are hidden from accessiblity, e.g. elements on non-active screen when using React Navigation, now will not be matched by default by all queries. This is the effect of switching the default value for global config option ",(0,s.jsx)(n.code,{children:"defaultIncludeHiddenElements"}),"(api#defaultincludehiddenelements-option) to ",(0,s.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Previous behaviour of matching hidden elements can be enabled on query level using ",(0,s.jsx)(n.a,{href:"/docs/api/queries#includehiddenelements-option",children:"includeHiddenElements"})," query options or globally using ",(0,s.jsx)(n.code,{children:"defaultIncludeHiddenElements"}),"(api#defaultincludehiddenelements-option) configuration option."]}),"\n",(0,s.jsxs)(n.h3,{id:"2-byrole-queries-now-return-only-accessibility-elements",children:["2. ",(0,s.jsx)(n.code,{children:"*ByRole"})," queries now return only accessibility elements",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-byrole-queries-now-return-only-accessibility-elements",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"*ByRole"})," queries now return only accessibility elements, either explicitly marked with ",(0,s.jsx)(n.code,{children:"accessible"})," prop or implicit ones where this status is derived from component type itself (e.g ",(0,s.jsx)(n.code,{children:"Text"}),", ",(0,s.jsx)(n.code,{children:"TextInput"}),", ",(0,s.jsx)(n.code,{children:"Switch"}),", but not ",(0,s.jsx)(n.code,{children:"View"}),")."]}),"\n",(0,s.jsxs)(n.p,{children:["You may need to adjust relevant components under test to make sure they pass ",(0,s.jsx)(n.code,{children:"isAccessibilityElement"})," check."]}),"\n",(0,s.jsxs)(n.h4,{id:"examples",children:["Examples",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#examples",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["Let's assume we are using ",(0,s.jsx)(n.code,{children:'getByRole("button")'})," query."]}),"\n",(0,s.jsx)(n.p,{children:"Following elements will match:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'// Explicit "accessible" prop for View\n<View accessible accessibilityRole="button" />\n\n// No need to "accessible" prop for Text, as it is implicitly accessible element.\n<Text accessibilityRole="button">Button</Text>\n'})}),"\n",(0,s.jsx)(n.p,{children:"While following elements will not match:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'// Missing "accessible" prop for View\n<View accessibilityRole="button" />\n\n// Explicit "accessible={false}" prop for View\n<View accessible={false} accessibilityRole="button" />\n\n// Explicit "accessible={false}" for Text, which is implicitly accessible element\n<Text accessible={false} accessibilityRole="button">Button</Text>\n'})}),"\n",(0,s.jsxs)(n.h3,{id:"3-bytext-bydisplayvalue-byplaceholdertext-queries-now-return-host-elements",children:["3. ",(0,s.jsx)(n.code,{children:"*ByText"}),", ",(0,s.jsx)(n.code,{children:"*ByDisplayValue"}),", ",(0,s.jsx)(n.code,{children:"*ByPlaceholderText"})," queries now return host elements",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-bytext-bydisplayvalue-byplaceholdertext-queries-now-return-host-elements",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"*ByText"}),", ",(0,s.jsx)(n.code,{children:"*ByDisplayValue"}),", ",(0,s.jsx)(n.code,{children:"*ByPlaceholderText"})," queries now return ",(0,s.jsx)(n.a,{href:"/docs/advanced/testing-env#host-and-composite-components",children:"host elements"}),", which is consistent with other queries."]}),"\n",(0,s.jsx)(n.p,{children:"While potentially breaking, this should not cause issues in tests if you are using recommended queries and Jest Matchers from Jest Native package."}),"\n",(0,s.jsxs)(n.p,{children:["Problematic cases may include: directly checking some prop values (without using Jest Native matchers), referencing other nodes using ",(0,s.jsx)(n.code,{children:"parent"})," or ",(0,s.jsx)(n.code,{children:"children"})," props, examining ",(0,s.jsx)(n.code,{children:"type"})," property of ",(0,s.jsx)(n.code,{children:"ReactTestInstance"}),", etc."]}),"\n",(0,s.jsxs)(n.h3,{id:"4-container-api-has-been-renamed-to-unsafe_root",children:["4. ",(0,s.jsx)(n.code,{children:"container"})," API has been renamed to ",(0,s.jsx)(n.code,{children:"UNSAFE_root"}),".",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4-container-api-has-been-renamed-to-unsafe_root",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["Historically ",(0,s.jsx)(n.code,{children:"container"})," was supposed to mimic the ",(0,s.jsx)(n.a,{href:"https://testing-library.com/docs/react-testing-library/screen#container",target:"_blank",rel:"noopener noreferrer",children:"RTL's container"}),". However it turned out not so relevant in RNTL's environment, where we actually used it to return React Test Renderer's root instance."]}),"\n",(0,s.jsxs)(n.p,{children:["RNTL v12 introduces ",(0,s.jsx)(n.code,{children:"root"})," API as an alternative that returns a root ",(0,s.jsx)(n.strong,{children:"host"})," element. The difference between ",(0,s.jsx)(n.code,{children:"root"})," and ",(0,s.jsx)(n.code,{children:"UNSAFE_root"})," properties is that that ",(0,s.jsx)(n.code,{children:"root"})," will always represents a host element, while ",(0,s.jsx)(n.code,{children:"UNSAFE_root"})," will typically represent a composite element."]}),"\n",(0,s.jsxs)(n.p,{children:["If you use ",(0,s.jsx)(n.code,{children:"toBeOnTheScreen"})," matcher from ",(0,s.jsx)(n.a,{href:"https://github.com/testing-library/jest-native",target:"_blank",rel:"noopener noreferrer",children:"@testing-library/jest-native"})," your tests will fail because it uses the ",(0,s.jsx)(n.code,{children:"container"})," api. To fix this, update ",(0,s.jsx)(n.code,{children:"@testing-library/jest-native"})," to version 5.4.2."]}),"\n",(0,s.jsxs)(n.h2,{id:"full-changelog",children:["Full Changelog",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#full-changelog",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://github.com/callstack/react-native-testing-library/compare/v11.5.2...v12.0.0",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/callstack/react-native-testing-library/compare/v11.5.2...v12.0.0"})})]})}function l(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(r,{...e})}):r(e)}let a=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["12.x%2Fdocs%2Fmigration%2Fv12.mdx"]={toc:[{text:"Breaking changes",id:"breaking-changes",depth:2},{text:"1. All queries exclude elements hidden from accessibility by default",id:"1-all-queries-exclude-elements-hidden-from-accessibility-by-default",depth:3},{text:"2. `*ByRole` queries now return only accessibility elements",id:"2-byrole-queries-now-return-only-accessibility-elements",depth:3},{text:"Examples",id:"examples",depth:4},{text:"3. `*ByText`, `*ByDisplayValue`, `*ByPlaceholderText` queries now return host elements",id:"3-bytext-bydisplayvalue-byplaceholdertext-queries-now-return-host-elements",depth:3},{text:"4. `container` API has been renamed to `UNSAFE_root`.",id:"4-container-api-has-been-renamed-to-unsafe_root",depth:3},{text:"Full Changelog",id:"full-changelog",depth:2}],title:"Migration to 12.x",headingTitle:"Migration to 12.x",frontmatter:{}}}}]);