"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([["9437"],{751:function(e,t,n){n.r(t),n.d(t,{default:()=>o});var s=n(5893),r=n(65);function a(e){let t=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",div:"div",code:"code",pre:"pre",ul:"ul",li:"li"},(0,r.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.h1,{id:"network-requests",children:["Network Requests",(0,s.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#network-requests",children:"#"})]}),"\n",(0,s.jsxs)(t.h2,{id:"introduction",children:["Introduction",(0,s.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#introduction",children:"#"})]}),"\n",(0,s.jsx)(t.p,{children:"Mocking network requests is an essential part of testing React Native applications. By mocking\nnetwork\nrequests, you can control the data that is returned from the server and test how your application\nbehaves in different scenarios, such as when the request is successful or when it fails."}),"\n",(0,s.jsx)(t.p,{children:"In this guide, we will show you how to mock network requests and guard your test suits from unwanted\nand unmocked/unhandled network requests"}),"\n",(0,s.jsxs)(t.div,{className:"rspress-directive info",children:[(0,s.jsx)(t.div,{className:"rspress-directive-title",children:"INFO"}),(0,s.jsx)(t.div,{className:"rspress-directive-content",children:(0,s.jsxs)(t.p,{children:["To simulate a real-world scenario, we will use the ",(0,s.jsx)(t.a,{href:"https://randomuser.me/",target:"_blank",rel:"noopener noreferrer",children:"Random User Generator API"})," that provides random user data.\n"]})})]}),"\n",(0,s.jsxs)(t.h2,{id:"phonebook-example",children:["Phonebook Example",(0,s.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#phonebook-example",children:"#"})]}),"\n",(0,s.jsxs)(t.p,{children:["Let's assume we have a simple phonebook application that\nuses ",(0,s.jsx)(t.a,{href:"https://reactnative.dev/docs/network#using-fetch",target:"_blank",rel:"noopener noreferrer",children:(0,s.jsx)(t.code,{children:"fetch"})})," for fetching Data from a server.\nIn our case, we have a list of contacts and favorites that we want to display in our application."]}),"\n",(0,s.jsx)(t.p,{children:"This is how the root of the application looks like:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",meta:"title=network-requests/Phonebook.tsx",children:"import React, { useEffect, useState } from 'react';\nimport { Text } from 'react-native';\nimport { User } from './types';\nimport ContactsList from './components/ContactsList';\nimport FavoritesList from './components/FavoritesList';\nimport getAllContacts from './api/getAllContacts';\nimport getAllFavorites from './api/getAllFavorites';\n\nexport default () => {\n  const [usersData, setUsersData] = useState<User[]>([]);\n  const [favoritesData, setFavoritesData] = useState<User[]>([]);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const _getAllContacts = async () => {\n      const _data = await getAllContacts();\n      setUsersData(_data);\n    };\n    const _getAllFavorites = async () => {\n      const _data = await getAllFavorites();\n      setFavoritesData(_data);\n    };\n\n    const run = async () => {\n      try {\n        await Promise.all([_getAllContacts(), _getAllFavorites()]);\n      } catch (e) {\n        const message = isErrorWithMessage(e) ? e.message : 'Something went wrong';\n        setError(message);\n      }\n    };\n\n    void run();\n  }, []);\n\n  if (error) {\n    return <Text>An error occurred: {error}</Text>;\n  }\n\n  return (\n    <>\n      <FavoritesList users={favoritesData} />\n      <ContactsList users={usersData} />\n    </>\n  );\n};\n"})}),"\n",(0,s.jsxs)(t.p,{children:["We fetch the contacts from the server using the ",(0,s.jsx)(t.code,{children:"getAllFavorites"})," function that utilizes ",(0,s.jsx)(t.code,{children:"fetch"}),"."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",meta:"title=network-requests/api/getAllContacts.ts",children:"import { User } from '../types';\n\nexport default async (): Promise<User[]> => {\n  const res = await fetch('https://randomuser.me/api/?results=25');\n  if (!res.ok) {\n    throw new Error(`Error fetching contacts`);\n  }\n  const json = await res.json();\n  return json.results;\n};\n"})}),"\n",(0,s.jsx)(t.p,{children:"We have similar function for fetching the favorites, but this time limiting the results to 10."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",meta:"title=network-requests/api/getAllFavorites.ts",children:"import { User } from '../types';\n\nexport default async (): Promise<User[]> => {\n  const res = await fetch('https://randomuser.me/api/?results=10');\n  if (!res.ok) {\n    throw new Error(`Error fetching favorites`);\n  }\n  const json = await res.json();\n  return json.results;\n};\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Our ",(0,s.jsx)(t.code,{children:"FavoritesList"})," component is a simple component that displays the list of favorite contacts and\ntheir avatars horizontally."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",meta:"title=network-requests/components/FavoritesList.tsx",children:"import {FlatList, Image, StyleSheet, Text, View} from 'react-native';\nimport React, {useCallback} from 'react';\nimport type {ListRenderItem} from '@react-native/virtualized-lists';\nimport {User} from '../types';\n\nexport default ({users}: { users: User[] }) => {\n  const renderItem: ListRenderItem<User> = useCallback(({item: {picture}}) => {\n    return (\n      <View style={styles.userContainer}>\n        <Image\n          source={{uri: picture.thumbnail}}\n          style={styles.userImage}\n          accessibilityLabel={'favorite-contact-avatar'}\n        />\n      </View>\n    );\n  }, []);\n\n  if (users.length === 0) return (\n    <View style={styles.loaderContainer}>\n      <Text>Figuring out your favorites...</Text>\n    </View>\n  );\n\n  return (\n    <View style={styles.outerContainer}>\n      <Text>‚≠êMy Favorites</Text>\n      <FlatList<User>\n        horizontal\n        showsHorizontalScrollIndicator={false}\n        data={users}\n        renderItem={renderItem}\n        keyExtractor={(item, index) => `${index}-${item.id.value}`}\n      />\n    </View>\n  );\n};\n\n// Looking for styles?\n// Check examples/cookbook/app/advanced/components/FavoritesList.tsx\nconst styles =\n...\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Our ",(0,s.jsx)(t.code,{children:"ContactsList"})," component is similar to the ",(0,s.jsx)(t.code,{children:"FavoritesList"})," component, but it displays the list\nof\nall contacts vertically."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",meta:"title=network-requests/components/ContactsList.tsx",children:"import { FlatList, Image, StyleSheet, Text, View } from 'react-native';\nimport React, { useCallback } from 'react';\nimport type { ListRenderItem } from '@react-native/virtualized-lists';\nimport { User } from '../types';\n\nexport default ({ users }: { users: User[] }) => {\n  const renderItem: ListRenderItem<User> = useCallback(\n    ({ item: { name, email, picture, cell }, index }) => {\n      const { title, first, last } = name;\n      const backgroundColor = index % 2 === 0 ? '#f9f9f9' : '#fff';\n      return (\n        <View style={[{ backgroundColor }, styles.userContainer]}>\n          <Image source={{ uri: picture.thumbnail }} style={styles.userImage} />\n          <View>\n            <Text>\n              Name: {title} {first} {last}\n            </Text>\n            <Text>Email: {email}</Text>\n            <Text>Mobile: {cell}</Text>\n          </View>\n        </View>\n      );\n    },\n    [],\n  );\n\n  if (users.length === 0) return <FullScreenLoader />;\n\n  return (\n    <View>\n      <FlatList<User>\n        data={users}\n        renderItem={renderItem}\n        keyExtractor={(item, index) => `${index}-${item.id.value}`}\n      />\n    </View>\n  );\n};\n\n// Looking for styles or FullScreenLoader component?\n// Check examples/cookbook/app/advanced/components/ContactsList.tsx\nconst FullScreenLoader = () => ...\nconst styles = ...\n"})}),"\n",(0,s.jsxs)(t.h2,{id:"start-testing-with-a-simple-test",children:["Start testing with a simple test",(0,s.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#start-testing-with-a-simple-test",children:"#"})]}),"\n",(0,s.jsxs)(t.p,{children:["In our initial test we would like to test if the ",(0,s.jsx)(t.code,{children:"PhoneBook"})," component renders the ",(0,s.jsx)(t.code,{children:"FavoritesList"}),"\nand ",(0,s.jsx)(t.code,{children:"ContactsList"})," components correctly.\nWe will need to mock the network requests and their corresponding responses to ensure that the component behaves as\nexpected. To mock the network requests we will use ",(0,s.jsx)(t.a,{href:"https://mswjs.io/docs/getting-started",target:"_blank",rel:"noopener noreferrer",children:"MSW (Mock Service Worker)"}),"."]}),"\n",(0,s.jsxs)(t.div,{className:"rspress-directive note",children:[(0,s.jsx)(t.div,{className:"rspress-directive-title",children:"NOTE"}),(0,s.jsx)(t.div,{className:"rspress-directive-content",children:(0,s.jsxs)(t.p,{children:["We recommend using the Mock Service Worker (MSW) library to declaratively mock API communication in your tests instead of stubbing ",(0,s.jsx)(t.code,{children:"fetch"}),", or relying on third-party adapters.\n"]})})]}),"\n",(0,s.jsxs)(t.div,{className:"rspress-directive info",children:[(0,s.jsx)(t.div,{className:"rspress-directive-title",children:"INFO"}),(0,s.jsxs)(t.div,{className:"rspress-directive-content",children:[(0,s.jsxs)(t.p,{children:["You can install MSW by running ",(0,s.jsx)(t.code,{children:"npm install msw --save-dev"})," or ",(0,s.jsx)(t.code,{children:"yarn add msw --dev"}),".\nMore info regarding installation can be found in ",(0,s.jsx)(t.a,{href:"https://mswjs.io/docs/getting-started#step-1-install",target:"_blank",rel:"noopener noreferrer",children:"MSW's getting started guide"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["Please make sure you're also aware of ",(0,s.jsx)(t.a,{href:"https://mswjs.io/docs/integrations/react-native",target:"_blank",rel:"noopener noreferrer",children:"MSW's setup guide"}),".\nPlease be minded that the MSW's setup guide is potentially incomplete and might contain discrepancies/missing pieces.\n"]})]})]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",meta:"title=network-requests/Phonebook.test.tsx",children:"import { render, screen, waitForElementToBeRemoved } from '@testing-library/react-native';\nimport React from 'react';\nimport PhoneBook from '../PhoneBook';\nimport { User } from '../types';\nimport {http, HttpResponse} from \"msw\";\nimport {setupServer} from \"msw/node\";\n\n// Define request handlers and response resolvers for random user API.\n// By default, we always return the happy path response.\nconst handlers = [\n  http.get('https://randomuser.me/api/*', () => {\n    return HttpResponse.json(DATA);\n  }),\n];\n\n// Setup a request interception server with the given request handlers.\nconst server = setupServer(...handlers);\n\n// Enable API mocking via Mock Service Worker (MSW)\nbeforeAll(() => server.listen());\n// Reset any runtime request handlers we may add during the tests\nafterEach(() => server.resetHandlers());\n// Disable API mocking after the tests are done\nafterAll(() => server.close());\n\ndescribe('PhoneBook', () => {\n  it('fetches all contacts and favorites successfully and renders lists in sections correctly', async () => {\n    render(<PhoneBook />);\n\n    await waitForElementToBeRemoved(() => screen.getByText(/users data not quite there yet/i));\n    expect(await screen.findByText('Name: Mrs Ida Kristensen')).toBeOnTheScreen();\n    expect(await screen.findByText('Email: ida.kristensen@example.com')).toBeOnTheScreen();\n    expect(await screen.findAllByText(/name/i)).toHaveLength(3);\n    expect(await screen.findByText(/my favorites/i)).toBeOnTheScreen();\n    expect(await screen.findAllByLabelText('favorite-contact-avatar')).toHaveLength(3);\n  });\n});\n\nconst DATA: { results: User[] } = {\n  results: [\n    {\n      name: {\n        title: 'Mrs',\n        first: 'Ida',\n        last: 'Kristensen',\n      },\n      email: 'ida.kristensen@example.com',\n      id: {\n        name: 'CPR',\n        value: '250562-5730',\n      },\n      picture: {\n        large: 'https://randomuser.me/api/portraits/women/26.jpg',\n        medium: 'https://randomuser.me/api/portraits/med/women/26.jpg',\n        thumbnail: 'https://randomuser.me/api/portraits/thumb/women/26.jpg',\n      },\n      cell: '123-4567-890',\n    },\n    // For brevity, we have omitted the rest of the users, you can still find them in\n    // examples/cookbook/app/network-requests/__tests__/test-utils.ts\n    ...\n  ],\n};\n"})}),"\n",(0,s.jsxs)(t.div,{className:"rspress-directive info",children:[(0,s.jsx)(t.div,{className:"rspress-directive-title",children:"INFO"}),(0,s.jsx)(t.div,{className:"rspress-directive-content",children:(0,s.jsxs)(t.p,{children:["More info regarding how to describe the network using request handlers, intercepting a request and handling its response can be found in the ",(0,s.jsx)(t.a,{href:"https://mswjs.io/docs/getting-started#step-2-describe",target:"_blank",rel:"noopener noreferrer",children:"MSW's documentation"}),".\n"]})})]}),"\n",(0,s.jsxs)(t.h2,{id:"testing-error-handling",children:["Testing error handling",(0,s.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#testing-error-handling",children:"#"})]}),"\n",(0,s.jsx)(t.p,{children:"As we are dealing with network requests, and things can go wrong, we should also cover the case when\nthe API request fails. In this case, we would like to test how our application behaves when the API request fails."}),"\n",(0,s.jsxs)(t.div,{className:"rspress-directive info",children:[(0,s.jsx)(t.div,{className:"rspress-directive-title",children:"INFO"}),(0,s.jsxs)(t.div,{className:"rspress-directive-content",children:[(0,s.jsxs)(t.p,{children:["The nature of the network can be highly dynamic, which makes it challenging to describe it completely in a fixed list of request handlers.",(0,s.jsx)(t.code,{children:".use()"})," API.\nMore info can be found in ",(0,s.jsx)(t.a,{href:"https://mswjs.io/docs/best-practices/network-behavior-overrides",target:"_blank",rel:"noopener noreferrer",children:"MSW's Network behavior overrides documentation"}),"\n"]}),(0,s.jsx)(t.p,{children:"MSW provides us the means to override any particular network behavior using the designated "})]})]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",meta:"title=network-requests/Phonebook.test.tsx",children:"...\n\nconst mockServerFailureForGetAllContacts = () => {\n  server.use(\n    http.get('https://randomuser.me/api/', ({ request }) => {\n      // Construct a URL instance out of the intercepted request.\n      const url = new URL(request.url);\n      // Read the \"results\" URL query parameter using the \"URLSearchParams\" API.\n      const resultsLength = url.searchParams.get('results');\n      // Simulate a server error for the get all contacts request.\n      // We check if the \"results\" query parameter is set to \"25\"\n      // to know it's the correct request to mock, in our case get all contacts.\n      if (resultsLength === '25') {\n        return new HttpResponse(null, { status: 500 });\n      }\n      // Return the default response for all other requests that match URL and verb. (in our case get favorites)\n      return HttpResponse.json(DATA);\n    }),\n  );\n};\n\ndescribe('PhoneBook', () => {\n...\n  it('fails to fetch all contacts and renders error message', async () => {\n    mockServerFailureForGetAllContacts();\n    render(<PhoneBook />);\n\n    await waitForElementToBeRemoved(() => screen.getByText(/users data not quite there yet/i));\n    expect(\n      await screen.findByText(/an error occurred: error fetching contacts/i),\n    ).toBeOnTheScreen();\n  });\n});\n\n"})}),"\n",(0,s.jsxs)(t.h2,{id:"global-guarding-against-unwanted-api-requests",children:["Global guarding against unwanted API requests",(0,s.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#global-guarding-against-unwanted-api-requests",children:"#"})]}),"\n",(0,s.jsxs)(t.p,{children:["As mistakes may happen, we might forget to mock a network request in one of our tests in the future.\nTo prevent us from happening, and alert when a certain network request is left unhandled, you may choose to\nmove MSW's server management from ",(0,s.jsx)(t.code,{children:"PhoneBook.test.tsx"})," to Jest's setup file via ",(0,s.jsx)(t.a,{href:"https://jestjs.io/docs/configuration#setupfilesafterenv-array",target:"_blank",rel:"noopener noreferrer",children:(0,s.jsx)(t.code,{children:"setupFilesAfterEnv"})}),"."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",meta:"title=examples/cookbook/jest-setup.ts",children:"// Enable API mocking via Mock Service Worker (MSW)\nbeforeAll(() => server.listen());\n// Reset any runtime request handlers we may add during the tests\nafterEach(() => server.resetHandlers());\n// Disable API mocking after the tests are done\nafterAll(() => server.close());\n\n// ... rest of your setup file\n"})}),"\n",(0,s.jsx)(t.p,{children:"This setup will ensure you have the MSW server running before any test suite starts and stops it after all tests are done.\nWhich will result in a warning in the console if you forget to mock an API request in your test suite."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"[MSW] Warning: intercepted a request without a matching request handler:\n ‚Ä¢ GET https://randomuser.me/api/?results=25?results=25\n"})}),"\n",(0,s.jsxs)(t.h2,{id:"conclusion",children:["Conclusion",(0,s.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#conclusion",children:"#"})]}),"\n",(0,s.jsx)(t.p,{children:"Testing a component that makes network requests in combination with MSW takes some initial preparation to configure and describe the overridden networks.\nWe can achieve that by using MSW's request handlers and intercepting APIs."}),"\n",(0,s.jsx)(t.p,{children:"Once up and running we gain full grip over the network requests, their responses, statuses.\nDoing so is crucial to be able to test how our application behaves in different\nscenarios, such as when the request is successful or when it fails."}),"\n",(0,s.jsx)(t.p,{children:"When global configuration is in place, MSW's will also warn us when an unhandled network requests has occurred throughout a test suite."}),"\n",(0,s.jsxs)(t.h2,{id:"further-reading-and-alternatives",children:["Further Reading and Alternatives",(0,s.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#further-reading-and-alternatives",children:"#"})]}),"\n",(0,s.jsx)(t.p,{children:"Explore more advanced scenarios for mocking network requests with MSW:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["MSW's Basics - ",(0,s.jsx)(t.a,{href:"https://mswjs.io/docs/basics/intercepting-requests",target:"_blank",rel:"noopener noreferrer",children:"Intercepting requests"})," and/or ",(0,s.jsx)(t.a,{href:"https://mswjs.io/docs/basics/mocking-responses",target:"_blank",rel:"noopener noreferrer",children:"Mocking responses"})]}),"\n",(0,s.jsxs)(t.li,{children:["MSW's Network behavior - how to describe ",(0,s.jsx)(t.a,{href:"https://mswjs.io/docs/network-behavior/rest",target:"_blank",rel:"noopener noreferrer",children:"REST"})," and/or ",(0,s.jsx)(t.a,{href:"https://mswjs.io/docs/network-behavior/graphql",target:"_blank",rel:"noopener noreferrer",children:"GraphQL"})," APIs"]}),"\n"]})]})}function i(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:t}=Object.assign({},(0,r.ah)(),e.components);return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}let o=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["13.x%2Fcookbook%2Fadvanced%2Fnetwork-requests.md"]={toc:[{text:"Introduction",id:"introduction",depth:2},{text:"Phonebook Example",id:"phonebook-example",depth:2},{text:"Start testing with a simple test",id:"start-testing-with-a-simple-test",depth:2},{text:"Testing error handling",id:"testing-error-handling",depth:2},{text:"Global guarding against unwanted API requests",id:"global-guarding-against-unwanted-api-requests",depth:2},{text:"Conclusion",id:"conclusion",depth:2},{text:"Further Reading and Alternatives",id:"further-reading-and-alternatives",depth:2}],title:"Network Requests",headingTitle:"Network Requests",frontmatter:{}}}}]);