"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([["6791"],{1997:function(e,n,t){t.r(n),t.d(n,{default:()=>o});var s=t(5893),r=t(65);function i(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",ul:"ul",li:"li",strong:"strong",code:"code",h3:"h3",pre:"pre"},(0,r.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"third-party-library-integration",children:["Third-Party Library Integration",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#third-party-library-integration",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"The React Native Testing Library is designed to simulate the core behaviors of React Native. However, it does not replicate the internal logic of third-party libraries. This guide explains how to integrate your library with RNTL."}),"\n",(0,s.jsxs)(n.h2,{id:"handling-events-in-third-party-libraries",children:["Handling Events in Third-Party Libraries",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#handling-events-in-third-party-libraries",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"RNTL provides two subsystems to simulate events:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Fire Event"}),": A lightweight simulation system that can trigger event handlers defined on both host and composite components."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"User Event"}),": A more realistic interaction simulation system that can trigger event handlers defined only on host components."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["In many third-party libraries, event handling involves native code, which means RNTL cannot fully simulate the event flow, as it runs only JavaScript code. To address this limitation, you can use ",(0,s.jsx)(n.code,{children:"testOnly_on*"})," props on host components to expose custom events to RNTL’s event subsystems. Both subsystems will first attempt to locate the standard ",(0,s.jsx)(n.code,{children:"on*"})," event handlers; if these are not available, they fall back to the ",(0,s.jsx)(n.code,{children:"testOnly_on*"})," handlers."]}),"\n",(0,s.jsxs)(n.h3,{id:"example-react-native-gesture-handler",children:["Example: React Native Gesture Handler",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#example-react-native-gesture-handler",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["React Native Gesture Handler (RNGH) provides a composite ",(0,s.jsx)(n.a,{href:"https://docs.swmansion.com/react-native-gesture-handler/docs/components/pressable/",target:"_blank",rel:"noopener noreferrer",children:"Pressable"})," component with ",(0,s.jsx)(n.code,{children:"onPress*"})," props. These event handlers are not exposed on the rendered host views; instead, they are invoked via RNGH’s internal event flow, which involves native modules. As a result, they are not accessible to RNTL’s event subsystems."]}),"\n",(0,s.jsxs)(n.p,{children:["To enable RNTL to interact with RNGH’s ",(0,s.jsx)(n.code,{children:"Pressable"})," component, the library exposes ",(0,s.jsx)(n.code,{children:"testOnly_onPress*"})," props on the ",(0,s.jsx)(n.code,{children:"NativeButton"})," host component rendered by ",(0,s.jsx)(n.code,{children:"Pressable"}),". This adjustment allows RNTL to simulate interactions during testing."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",meta:'title="Simplified RNGH Pressable component"',children:"function Pressable({ onPress, onPressIn, onPressOut, onLongPress, ... }) {\n\n  // Component logic...\n\n  const isTestEnv = process.env.NODE_ENV === 'test';\n\n  return (\n    <GestureDetector gesture={gesture}>\n      <NativeButton\n        /* Other props... */\n        testOnly_onPress={isTestEnv ? onPress : undefined}\n        testOnly_onPressIn={isTestEnv ? onPressIn : undefined}\n        testOnly_onPressOut={isTestEnv ? onPressOut : undefined}\n        testOnly_onLongPress={isTestEnv ? onLongPress : undefined}\n      />\n    </GestureDetector>\n  );\n}\n"})})]})}function a(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(i,{...e})}):i(e)}let o=a;a.__RSPRESS_PAGE_META={},a.__RSPRESS_PAGE_META["13.x%2Fdocs%2Fadvanced%2Fthird-party-integration.mdx"]={toc:[{text:"Handling Events in Third-Party Libraries",id:"handling-events-in-third-party-libraries",depth:2},{text:"Example: React Native Gesture Handler",id:"example-react-native-gesture-handler",depth:3}],title:"Third-Party Library Integration",headingTitle:"Third-Party Library Integration",frontmatter:{}}}}]);