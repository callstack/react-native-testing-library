"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([["2068"],{7772:function(e,n,s){s.r(n),s.d(n,{default:()=>a});var r=s(5893),t=s(65);function c(e){let n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",h2:"h2",strong:"strong",ul:"ul",li:"li",h3:"h3",ol:"ol",pre:"pre"},(0,t.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"react-19--suspense-support",children:["React 19 & Suspense Support",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#react-19--suspense-support",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["React 19 introduced full support for React Suspense, ",(0,r.jsx)(n.a,{href:"https://react.dev/reference/react/use",target:"_blank",rel:"noopener noreferrer",children:(0,r.jsx)(n.code,{children:"React.use()"})}),", and other async rendering features to React Native ",(0,r.jsx)(n.a,{href:"https://github.com/facebook/react-native/releases/tag/v0.78.0",target:"_blank",rel:"noopener noreferrer",children:"0.78.0"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["When testing components that use these features, React requires the ",(0,r.jsx)(n.a,{href:"https://react.dev/reference/react/act",target:"_blank",rel:"noopener noreferrer",children:(0,r.jsx)(n.code,{children:"async act"})})," helper to handle async state updates. This means React Native Testing Library needs new async versions of its core APIs. These async APIs work with both React 18 and React 19."]}),"\n",(0,r.jsxs)(n.h2,{id:"new-async-apis",children:["New async APIs",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#new-async-apis",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"RNTL 13.3 introduces async versions of the core testing APIs to handle React 19's async rendering:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Rendering APIs:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/docs/api/render#render-async",children:(0,r.jsx)(n.code,{children:"renderAsync"})})})," - async version of ",(0,r.jsx)(n.code,{children:"render"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/docs/api/screen#rerender-async",children:(0,r.jsx)(n.code,{children:"screen.rerenderAsync"})})})," - async version of ",(0,r.jsx)(n.code,{children:"screen.rerender"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/docs/api/screen#unmount-async",children:(0,r.jsx)(n.code,{children:"screen.unmountAsync"})})})," - async version of ",(0,r.jsx)(n.code,{children:"screen.unmount"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Event APIs:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/docs/api/events/fire-event#fire-event-async",children:(0,r.jsx)(n.code,{children:"fireEventAsync"})})})," - async version of ",(0,r.jsx)(n.code,{children:"fireEvent"})]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"apis-that-remain-unchanged",children:["APIs that remain unchanged",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#apis-that-remain-unchanged",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Many existing APIs continue to work without modification:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/docs/api/queries",children:"Query methods"})}),": ",(0,r.jsx)(n.code,{children:"screen.getBy*"}),", ",(0,r.jsx)(n.code,{children:"screen.queryBy*"}),", ",(0,r.jsx)(n.code,{children:"screen.findBy*"})," - all work the same"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/docs/api/events/user-event",children:"User Event API"})})," - already async, so no API changes needed"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/docs/api/jest-matchers",children:"Jest matchers"})})," - work with already-rendered output, so no changes required"]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"what-changes-in-your-tests",children:["What changes in your tests",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#what-changes-in-your-tests",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"making-tests-async",children:["Making tests async",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#making-tests-async",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["The main change is using ",(0,r.jsx)(n.a,{href:"/docs/api/render#renderasync",children:(0,r.jsx)(n.code,{children:"renderAsync"})})," instead of ",(0,r.jsx)(n.code,{children:"render"}),", which requires:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Making your test function ",(0,r.jsx)(n.code,{children:"async"})]}),"\n",(0,r.jsxs)(n.li,{children:["Adding ",(0,r.jsx)(n.code,{children:"await"})," before ",(0,r.jsx)(n.code,{children:"renderAsync"})]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"// Synchronous approach (React 18 pattern)\ntest('my component', () => {\n  render(<MyComponent />);\n  expect(screen.getByText('Hello')).toBeOnTheScreen();\n});\n\n// Async approach (React 19 ready)\ntest('my component', async () => {\n  await renderAsync(<MyComponent />);\n  expect(screen.getByText('Hello')).toBeOnTheScreen();\n});\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"when-to-use-async-apis",children:["When to use async APIs",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#when-to-use-async-apis",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Use the async APIs when your components:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Use React Suspense for data fetching or code splitting"}),"\n",(0,r.jsxs)(n.li,{children:["Call ",(0,r.jsx)(n.code,{children:"React.use()"})," for reading promises or context"]}),"\n",(0,r.jsxs)(n.li,{children:["Have async state updates that need proper ",(0,r.jsx)(n.code,{children:"act()"})," handling"]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"migration-strategy",children:["Migration strategy",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#migration-strategy",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"new-projects",children:["New projects",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#new-projects",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["Use the async-ready APIs (",(0,r.jsx)(n.code,{children:"renderAsync"}),", User Event, Jest Matchers, etc.) from the start. They work with both React 18 and React 19."]}),"\n",(0,r.jsxs)(n.h3,{id:"existing-projects",children:["Existing projects",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#existing-projects",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"You can migrate gradually:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Existing tests"})," continue to work with synchronous APIs (",(0,r.jsx)(n.code,{children:"render"}),", etc.)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"New tests"})," should use async APIs"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["Tests with Suspense/",(0,r.jsx)(n.code,{children:"React.use()"})]})," must use async APIs"]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"future-direction",children:["Future direction",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#future-direction",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Async APIs will become the default recommendation as React 19 adoption grows. Starting with them now saves migration effort later."})]})}function i(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}let a=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["13.x%2Fdocs%2Fguides%2Freact-19.mdx"]={toc:[{text:"New async APIs",id:"new-async-apis",depth:2},{text:"APIs that remain unchanged",id:"apis-that-remain-unchanged",depth:2},{text:"What changes in your tests",id:"what-changes-in-your-tests",depth:2},{text:"Making tests async",id:"making-tests-async",depth:3},{text:"When to use async APIs",id:"when-to-use-async-apis",depth:3},{text:"Migration strategy",id:"migration-strategy",depth:2},{text:"New projects",id:"new-projects",depth:3},{text:"Existing projects",id:"existing-projects",depth:3},{text:"Future direction",id:"future-direction",depth:3}],title:"React 19 & Suspense Support",headingTitle:"React 19 & Suspense Support",frontmatter:{}}}}]);