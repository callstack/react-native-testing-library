"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([["3942"],{7265:function(e,n,s){s.r(n),s.d(n,{default:()=>a});var r=s(5893),t=s(65);function i(e){let n=Object.assign({h1:"h1",code:"code",a:"a",pre:"pre",p:"p",h3:"h3",h4:"h4",em:"em",div:"div"},(0,t.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"screen-object",children:[(0,r.jsx)(n.code,{children:"screen"})," object",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#screen-object",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"let screen: {\n  ...queries;\n  rerender(element: React.Element<unknown>): void;\n  unmount(): void;\n  debug(options?: DebugOptions): void\n  toJSON(): ReactTestRendererJSON | null;\n  root: ReactTestInstance;\n  UNSAFE_root: ReactTestInstance;\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"screen"})," object offers a recommended way to access queries and utilities for the currently rendered UI."]}),"\n",(0,r.jsxs)(n.p,{children:["This object is assigned after the ",(0,r.jsx)(n.code,{children:"render"})," call and cleared after each test by calling ",(0,r.jsx)(n.a,{href:"/docs/api/misc/other#cleanup",children:(0,r.jsx)(n.code,{children:"cleanup"})}),". If no ",(0,r.jsx)(n.code,{children:"render"})," call has been made in a given test, then it holds a special object and throws a helpful error on each property and method access."]}),"\n",(0,r.jsxs)(n.h3,{id:"queries",children:[(0,r.jsx)(n.code,{children:"...queries"}),(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#queries",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["The most important feature of ",(0,r.jsx)(n.code,{children:"screen"})," is providing a set of helpful queries that allow you to find certain elements in the view hierarchy."]}),"\n",(0,r.jsxs)(n.p,{children:["See ",(0,r.jsx)(n.a,{href:"/docs/api/queries",children:"Queries"})," for a complete list."]}),"\n",(0,r.jsxs)(n.h4,{id:"example",children:["Example",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#example",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"import { render, screen } from '@testing-library/react-native';\n\nrender(<MyComponent />);\nconst buttonStart = screen.getByRole('button', { name: 'start' });\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"rerender",children:[(0,r.jsx)(n.code,{children:"rerender"}),(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#rerender",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.em,{children:["Also available under ",(0,r.jsx)(n.code,{children:"update"})," alias"]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"function rerender(element: React.Element<unknown>): void;\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Re-render the in-memory tree with a new root element. This simulates a React update render at the root. If the new element has the same type (and ",(0,r.jsx)(n.code,{children:"key"}),") as the previous element, the tree will be updated; otherwise, it will re-mount a new tree, in both cases triggering the appropriate lifecycle events."]}),"\n",(0,r.jsxs)(n.h3,{id:"unmount",children:[(0,r.jsx)(n.code,{children:"unmount"}),(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#unmount",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"function unmount(): void;\n"})}),"\n",(0,r.jsx)(n.p,{children:"Unmount the in-memory tree, triggering the appropriate lifecycle events."}),"\n",(0,r.jsxs)(n.div,{className:"rspress-directive note",children:[(0,r.jsx)(n.div,{className:"rspress-directive-title",children:"NOTE"}),(0,r.jsx)(n.div,{className:"rspress-directive-content",children:(0,r.jsxs)(n.p,{children:["Usually you should not need to call ",(0,r.jsx)(n.code,{children:"unmount"})," as it is done automatically if your test runner supports ",(0,r.jsx)(n.code,{children:"afterEach"})," hook (like Jest, mocha, Jasmine).\n"]})})]}),"\n",(0,r.jsxs)(n.h3,{id:"debug",children:[(0,r.jsx)(n.code,{children:"debug"}),(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#debug",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"function debug(options?: { message?: string; mapProps?: MapPropsFunction }): void;\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Pretty prints deeply rendered component passed to ",(0,r.jsx)(n.code,{children:"render"}),"."]}),"\n",(0,r.jsxs)(n.h4,{id:"debug-message-option",children:[(0,r.jsx)(n.code,{children:"message"})," option",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#debug-message-option",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"You can provide a message that will be printed on top."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"render(<Component />);\nscreen.debug({ message: 'optional message' });\n"})}),"\n",(0,r.jsx)(n.p,{children:"logs optional message and colored JSX:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"optional message\n\n<View\n  onPress={[Function bound fn]}\n>\n  <Text>Press me</Text>\n</View>\n"})}),"\n",(0,r.jsxs)(n.h4,{id:"debug-map-props-option",children:[(0,r.jsx)(n.code,{children:"mapProps"})," option",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#debug-map-props-option",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"function debug({ mapProps: (props) => ({}) });\n"})}),"\n",(0,r.jsxs)(n.p,{children:["You can use the ",(0,r.jsx)(n.code,{children:"mapProps"})," option to transform the props that will be printed :"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"render(<View style={{ backgroundColor: 'red' }} />);\nscreen.debug({ mapProps: ({ style, ...props }) => ({ props }) });\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This will log the rendered JSX without the ",(0,r.jsx)(n.code,{children:"style"})," props."]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"children"})," prop cannot be filtered out so the following will print all rendered components with all props but ",(0,r.jsx)(n.code,{children:"children"})," filtered out."]}),"\n",(0,r.jsxs)(n.p,{children:["This option can be used to target specific props when debugging a query (for instance, keeping only the ",(0,r.jsx)(n.code,{children:"children"})," prop when debugging a ",(0,r.jsx)(n.code,{children:"getByText"})," query)."]}),"\n",(0,r.jsx)(n.p,{children:"You can also transform prop values so that they are more readable (e.g., flatten styles)."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { StyleSheet } from 'react-native';\n\nscreen.debug({ mapProps : {({ style, ...props })} => ({ style : StyleSheet.flatten(style), ...props }) });\n"})}),"\n",(0,r.jsx)(n.p,{children:"Or remove props that have little value when debugging tests, e.g. path prop for svgs"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"screen.debug({ mapProps: ({ path, ...props }) => ({ ...props }) });\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"tojson",children:[(0,r.jsx)(n.code,{children:"toJSON"}),(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#tojson",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"function toJSON(): ReactTestRendererJSON | null;\n"})}),"\n",(0,r.jsx)(n.p,{children:"Get the rendered component JSON representation, e.g. for snapshot testing."}),"\n",(0,r.jsxs)(n.h3,{id:"root",children:[(0,r.jsx)(n.code,{children:"root"}),(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#root",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const root: ReactTestInstance;\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Returns the rendered root ",(0,r.jsx)(n.a,{href:"/docs/advanced/testing-env#host-and-composite-components",children:"host element"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["This API is primarily useful for component tests, as it allows you to access root host view without using ",(0,r.jsx)(n.code,{children:"*ByTestId"})," queries or similar methods."]}),"\n",(0,r.jsxs)(n.h3,{id:"unsafe_root",children:[(0,r.jsx)(n.code,{children:"UNSAFE_root"}),(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#unsafe_root",children:"#"})]}),"\n",(0,r.jsxs)(n.div,{className:"rspress-directive caution",children:[(0,r.jsx)(n.div,{className:"rspress-directive-title",children:"CAUTION"}),(0,r.jsx)(n.div,{className:"rspress-directive-content",children:(0,r.jsx)(n.p,{children:"This API typically will return a composite view, which goes against recommended testing practices. This API is primarily available for legacy test suites that rely on such testing."})})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const UNSAFE_root: ReactTestInstance;\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Returns the rendered ",(0,r.jsx)(n.a,{href:"/docs/advanced/testing-env#host-and-composite-components",children:"composite root element"}),"."]}),"\n",(0,r.jsxs)(n.div,{className:"rspress-directive note",children:[(0,r.jsx)(n.div,{className:"rspress-directive-title",children:"NOTE"}),(0,r.jsx)(n.div,{className:"rspress-directive-content",children:(0,r.jsxs)(n.p,{children:["This API has been previously named ",(0,r.jsx)(n.code,{children:"container"})," for compatibility with ",(0,r.jsx)(n.a,{href:"https://testing-library.com/docs/react-testing-library/other#container-1",target:"_blank",rel:"noopener noreferrer",children:"React Testing Library"}),". However, despite the same name, the actual behavior has been significantly different; hence, we decided to change the name to ",(0,r.jsx)(n.code,{children:"UNSAFE_root"}),".\n"]})})]})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(i,{...e})}):i(e)}let a=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["13.x%2Fdocs%2Fapi%2Fscreen.mdx"]={toc:[{text:"`...queries`",id:"queries",depth:3},{text:"Example",id:"example",depth:4},{text:"`rerender`",id:"rerender",depth:3},{text:"`unmount`",id:"unmount",depth:3},{text:"`debug`",id:"debug",depth:3},{text:"`message` option",id:"debug-message-option",depth:4},{text:"`mapProps` option",id:"debug-map-props-option",depth:4},{text:"`toJSON`",id:"tojson",depth:3},{text:"`root`",id:"root",depth:3},{text:"`UNSAFE_root`",id:"unsafe_root",depth:3}],title:"`screen` object",headingTitle:"`screen` object",frontmatter:{}}}}]);