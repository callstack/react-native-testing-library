"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([["521"],{6083:function(e,n,s){s.r(n),s.d(n,{default:()=>a});var r=s(5893),t=s(65);function i(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",code:"code",div:"div",p:"p",pre:"pre",h3:"h3",h4:"h4"},(0,t.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"fire-event-api",children:["Fire Event API",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#fire-event-api",children:"#"})]}),"\n",(0,r.jsxs)(n.h2,{id:"fire-event",children:[(0,r.jsx)(n.code,{children:"fireEvent"}),(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#fire-event",children:"#"})]}),"\n",(0,r.jsxs)(n.div,{className:"rspress-directive note",children:[(0,r.jsx)(n.div,{className:"rspress-directive-title",children:"NOTE"}),(0,r.jsxs)(n.div,{className:"rspress-directive-content",children:[(0,r.jsxs)(n.p,{children:["For common events like ",(0,r.jsx)(n.code,{children:"press"})," or ",(0,r.jsx)(n.code,{children:"type"})," it's recommended to use ",(0,r.jsx)(n.a,{href:"/docs/api/events/user-event",children:"User Event API"})," as it offers\nmore realistic event simulation by emitting a sequence of events with proper event objects that mimic React Native runtime behavior."]}),"\n",(0,r.jsx)(n.p,{children:"Use Fire Event for cases not supported by User Event and for triggering event handlers on composite components.\n"})]})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"function fireEvent(element: ReactTestInstance, eventName: string, ...data: unknown[]): void;\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"fireEvent"})," API allows you to trigger all kinds of event handlers on both host and composite components. It will try to invoke a single event handler traversing the component tree bottom-up from passed element and trying to find enabled event handler named ",(0,r.jsx)(n.code,{children:"onXxx"})," when ",(0,r.jsx)(n.code,{children:"xxx"})," is the name of the event passed."]}),"\n",(0,r.jsx)(n.p,{children:"Unlike User Event, this API does not automatically pass event object to event handler, this is responsibility of the user to construct such object."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"import { render, screen, fireEvent } from '@testing-library/react-native';\n\ntest('fire changeText event', () => {\n  const onEventMock = jest.fn();\n  render(\n    // MyComponent renders TextInput which has a placeholder 'Enter details'\n    // and with `onChangeText` bound to handleChangeText\n    <MyComponent handleChangeText={onEventMock} />\n  );\n\n  fireEvent(screen.getByPlaceholderText('change'), 'onChangeText', 'ab');\n  expect(onEventMock).toHaveBeenCalledWith('ab');\n});\n"})}),"\n",(0,r.jsxs)(n.div,{className:"rspress-directive note",children:[(0,r.jsx)(n.div,{className:"rspress-directive-title",children:"NOTE"}),(0,r.jsx)(n.div,{className:"rspress-directive-content",children:(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"fireEvent"})," performs checks that should prevent events firing on disabled elements.\n"]})})]}),"\n",(0,r.jsxs)(n.p,{children:["An example using ",(0,r.jsx)(n.code,{children:"fireEvent"})," with native events that aren't already aliased by the ",(0,r.jsx)(n.code,{children:"fireEvent"})," api."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"import { TextInput, View } from 'react-native';\nimport { fireEvent, render } from '@testing-library/react-native';\n\nconst onBlurMock = jest.fn();\n\nrender(\n  <View>\n    <TextInput placeholder=\"my placeholder\" onBlur={onBlurMock} />\n  </View>\n);\n\n// you can omit the `on` prefix\nfireEvent(screen.getByPlaceholderText('my placeholder'), 'blur');\n"})}),"\n",(0,r.jsxs)(n.p,{children:["FireEvent exposes convenience methods for common events like: ",(0,r.jsx)(n.code,{children:"press"}),", ",(0,r.jsx)(n.code,{children:"changeText"}),", ",(0,r.jsx)(n.code,{children:"scroll"}),"."]}),"\n",(0,r.jsxs)(n.h3,{id:"press",children:[(0,r.jsx)(n.code,{children:"fireEvent.press"}),(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#press",children:"#"})]}),"\n",(0,r.jsxs)(n.div,{className:"rspress-directive note",children:[(0,r.jsx)(n.div,{className:"rspress-directive-title",children:"NOTE"}),(0,r.jsx)(n.div,{className:"rspress-directive-content",children:(0,r.jsxs)(n.p,{children:["It is recommended to use the User Event ",(0,r.jsx)(n.a,{href:"/docs/api/events/user-event#press",children:(0,r.jsx)(n.code,{children:"press()"})})," helper instead as it offers more realistic simulation of press interaction, including pressable support.\n"]})})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"fireEvent.press: (\n  element: ReactTestInstance,\n  ...data: Array<any>,\n) => void\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Invokes ",(0,r.jsx)(n.code,{children:"press"})," event handler on the element or parent element in the tree."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"import { View, Text, TouchableOpacity } from 'react-native';\nimport { render, screen, fireEvent } from '@testing-library/react-native';\n\nconst onPressMock = jest.fn();\nconst eventData = {\n  nativeEvent: {\n    pageX: 20,\n    pageY: 30,\n  },\n};\n\nrender(\n  <View>\n    <TouchableOpacity onPress={onPressMock}>\n      <Text>Press me</Text>\n    </TouchableOpacity>\n  </View>\n);\n\nfireEvent.press(screen.getByText('Press me'), eventData);\nexpect(onPressMock).toHaveBeenCalledWith(eventData);\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"change-text",children:[(0,r.jsx)(n.code,{children:"fireEvent.changeText"}),(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#change-text",children:"#"})]}),"\n",(0,r.jsxs)(n.div,{className:"rspress-directive note",children:[(0,r.jsx)(n.div,{className:"rspress-directive-title",children:"NOTE"}),(0,r.jsx)(n.div,{className:"rspress-directive-content",children:(0,r.jsxs)(n.p,{children:["It is recommended to use the User Event ",(0,r.jsx)(n.a,{href:"/docs/api/events/user-event#type",children:(0,r.jsx)(n.code,{children:"type()"})})," helper instead as it offers more realistic simulation of text change interaction, including key-by-key typing, element focus, and other editing events.\n"]})})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"fireEvent.changeText: (\n  element: ReactTestInstance,\n  ...data: Array<any>,\n) => void\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Invokes ",(0,r.jsx)(n.code,{children:"changeText"})," event handler on the element or parent element in the tree."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"import { View, TextInput } from 'react-native';\nimport { render, screen, fireEvent } from '@testing-library/react-native';\n\nconst onChangeTextMock = jest.fn();\nconst CHANGE_TEXT = 'content';\n\nrender(\n  <View>\n    <TextInput placeholder=\"Enter data\" onChangeText={onChangeTextMock} />\n  </View>\n);\n\nfireEvent.changeText(screen.getByPlaceholderText('Enter data'), CHANGE_TEXT);\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"scroll",children:[(0,r.jsx)(n.code,{children:"fireEvent.scroll"}),(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#scroll",children:"#"})]}),"\n",(0,r.jsxs)(n.div,{className:"rspress-directive note",children:[(0,r.jsx)(n.div,{className:"rspress-directive-title",children:"NOTE"}),(0,r.jsx)(n.div,{className:"rspress-directive-content",children:(0,r.jsxs)(n.p,{children:["Prefer using ",(0,r.jsx)(n.a,{href:"/docs/api/events/user-event#scrollto",children:(0,r.jsx)(n.code,{children:"user.scrollTo"})})," over ",(0,r.jsx)(n.code,{children:"fireEvent.scroll"})," for ",(0,r.jsx)(n.code,{children:"ScrollView"}),", ",(0,r.jsx)(n.code,{children:"FlatList"}),", and ",(0,r.jsx)(n.code,{children:"SectionList"})," components. User Event provides a more realistic event simulation based on React Native runtime behavior.\n"]})})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"fireEvent.scroll: (\n  element: ReactTestInstance,\n  ...data: Array<any>,\n) => void\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Invokes ",(0,r.jsx)(n.code,{children:"scroll"})," event handler on the element or parent element in the tree."]}),"\n",(0,r.jsxs)(n.h4,{id:"on-a-scrollview",children:["On a ",(0,r.jsx)(n.code,{children:"ScrollView"}),(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#on-a-scrollview",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"import { ScrollView, Text } from 'react-native';\nimport { render, screen, fireEvent } from '@testing-library/react-native';\n\nconst onScrollMock = jest.fn();\nconst eventData = {\n  nativeEvent: {\n    contentOffset: {\n      y: 200,\n    },\n  },\n};\n\nrender(\n  <ScrollView onScroll={onScrollMock}>\n    <Text>XD</Text>\n  </ScrollView>\n);\n\nfireEvent.scroll(screen.getByText('scroll-view'), eventData);\n"})}),"\n",(0,r.jsxs)(n.div,{className:"rspress-directive note",children:[(0,r.jsx)(n.div,{className:"rspress-directive-title",children:"NOTE"}),(0,r.jsx)(n.div,{className:"rspress-directive-content",children:(0,r.jsxs)(n.p,{children:["Prefer using ",(0,r.jsx)(n.a,{href:"/docs/api/events/user-event#scrollto",children:(0,r.jsx)(n.code,{children:"user.scrollTo"})})," over ",(0,r.jsx)(n.code,{children:"fireEvent.scroll"})," for ",(0,r.jsx)(n.code,{children:"ScrollView"}),", ",(0,r.jsx)(n.code,{children:"FlatList"}),", and ",(0,r.jsx)(n.code,{children:"SectionList"})," components. User Event provides a more realistic event simulation based on React Native runtime behavior.\n"]})})]}),"\n",(0,r.jsxs)(n.h2,{id:"fire-event-async",children:[(0,r.jsx)(n.code,{children:"fireEventAsync"}),(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#fire-event-async",children:"#"})]}),"\n",(0,r.jsxs)(n.div,{className:"rspress-directive info",children:[(0,r.jsx)(n.div,{className:"rspress-directive-title",children:"RNTL minimal version"}),(0,r.jsxs)(n.div,{className:"rspress-directive-content",children:["\n",(0,r.jsx)(n.p,{children:"This API requires RNTL v13.3.0 or later."}),"\n"]})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"async function fireEventAsync(\n  element: ReactTestInstance,\n  eventName: string,\n  ...data: unknown[]\n): Promise<unknown>;\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"fireEventAsync"})," function is the async version of ",(0,r.jsx)(n.a,{href:"#fire-event",children:(0,r.jsx)(n.code,{children:"fireEvent"})})," designed for working with React 19 and React Suspense. This function uses async ",(0,r.jsx)(n.code,{children:"act"})," function internally to ensure all pending React updates are executed during event handling."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"import { renderAsync, screen, fireEventAsync } from '@testing-library/react-native';\n\ntest('fire event test', async () => {\n  await renderAsync(<MySuspenseComponent />);\n\n  await fireEventAsync(screen.getByText('Button'), 'press');\n  expect(screen.getByText('Action completed')).toBeOnTheScreen();\n});\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Like ",(0,r.jsx)(n.code,{children:"fireEvent"}),", ",(0,r.jsx)(n.code,{children:"fireEventAsync"})," also provides convenience methods for common events: ",(0,r.jsx)(n.code,{children:"fireEventAsync.press"}),", ",(0,r.jsx)(n.code,{children:"fireEventAsync.changeText"}),", and ",(0,r.jsx)(n.code,{children:"fireEventAsync.scroll"}),"."]}),"\n",(0,r.jsxs)(n.h3,{id:"async-press",children:[(0,r.jsx)(n.code,{children:"fireEventAsync.press"}),(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#async-press",children:"#"})]}),"\n",(0,r.jsxs)(n.div,{className:"rspress-directive note",children:[(0,r.jsx)(n.div,{className:"rspress-directive-title",children:"NOTE"}),(0,r.jsx)(n.div,{className:"rspress-directive-content",children:(0,r.jsxs)(n.p,{children:["It is recommended to use the User Event ",(0,r.jsx)(n.a,{href:"/docs/api/events/user-event#press",children:(0,r.jsx)(n.code,{children:"press()"})})," helper instead as it offers more realistic simulation of press interaction, including pressable support.\n"]})})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"fireEventAsync.press: (\n  element: ReactTestInstance,\n  ...data: Array<any>,\n) => Promise<unknown>\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Async version of ",(0,r.jsx)(n.a,{href:"#press",children:(0,r.jsx)(n.code,{children:"fireEvent.press"})})," designed for React 19 and React Suspense. Use when ",(0,r.jsx)(n.code,{children:"press"})," event handlers trigger suspense boundaries."]}),"\n",(0,r.jsxs)(n.h3,{id:"async-change-text",children:[(0,r.jsx)(n.code,{children:"fireEventAsync.changeText"}),(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#async-change-text",children:"#"})]}),"\n",(0,r.jsxs)(n.div,{className:"rspress-directive note",children:[(0,r.jsx)(n.div,{className:"rspress-directive-title",children:"NOTE"}),(0,r.jsx)(n.div,{className:"rspress-directive-content",children:(0,r.jsxs)(n.p,{children:["It is recommended to use the User Event ",(0,r.jsx)(n.a,{href:"/docs/api/events/user-event#type",children:(0,r.jsx)(n.code,{children:"type()"})})," helper instead as it offers more realistic simulation of text change interaction, including key-by-key typing, element focus, and other editing events.\n"]})})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"fireEventAsync.changeText: (\n  element: ReactTestInstance,\n  ...data: Array<any>,\n) => Promise<unknown>\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Async version of ",(0,r.jsx)(n.a,{href:"#change-text",children:(0,r.jsx)(n.code,{children:"fireEvent.changeText"})})," designed for React 19 and React Suspense. Use when ",(0,r.jsx)(n.code,{children:"changeText"})," event handlers trigger suspense boundaries."]}),"\n",(0,r.jsxs)(n.h3,{id:"async-scroll",children:[(0,r.jsx)(n.code,{children:"fireEventAsync.scroll"}),(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#async-scroll",children:"#"})]}),"\n",(0,r.jsxs)(n.div,{className:"rspress-directive note",children:[(0,r.jsx)(n.div,{className:"rspress-directive-title",children:"NOTE"}),(0,r.jsx)(n.div,{className:"rspress-directive-content",children:(0,r.jsxs)(n.p,{children:["Prefer using ",(0,r.jsx)(n.a,{href:"/docs/api/events/user-event#scrollto",children:(0,r.jsx)(n.code,{children:"user.scrollTo"})})," over ",(0,r.jsx)(n.code,{children:"fireEventAsync.scroll"})," for ",(0,r.jsx)(n.code,{children:"ScrollView"}),", ",(0,r.jsx)(n.code,{children:"FlatList"}),", and ",(0,r.jsx)(n.code,{children:"SectionList"})," components. User Event provides a more realistic event simulation based on React Native runtime behavior.\n"]})})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"fireEventAsync.scroll: (\n  element: ReactTestInstance,\n  ...data: Array<any>,\n) => Promise<unknown>\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Async version of ",(0,r.jsx)(n.a,{href:"#scroll",children:(0,r.jsx)(n.code,{children:"fireEvent.scroll"})})," designed for React 19 and React Suspense. Use when ",(0,r.jsx)(n.code,{children:"scroll"})," event handlers trigger suspense boundaries."]})]})}function c(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(i,{...e})}):i(e)}let a=c;c.__RSPRESS_PAGE_META={},c.__RSPRESS_PAGE_META["13.x%2Fdocs%2Fapi%2Fevents%2Ffire-event.mdx"]={toc:[{text:"`fireEvent`",id:"fire-event",depth:2},{text:"`fireEvent.press`",id:"press",depth:3},{text:"`fireEvent.changeText`",id:"change-text",depth:3},{text:"`fireEvent.scroll`",id:"scroll",depth:3},{text:"On a `ScrollView`",id:"on-a-scrollview",depth:4},{text:"`fireEventAsync`",id:"fire-event-async",depth:2},{text:"`fireEventAsync.press`",id:"async-press",depth:3},{text:"`fireEventAsync.changeText`",id:"async-change-text",depth:3},{text:"`fireEventAsync.scroll`",id:"async-scroll",depth:3}],title:"Fire Event API",headingTitle:"Fire Event API",frontmatter:{}}}}]);