"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([["1644"],{3447:function(e,n,r){r.r(n),r.d(n,{default:()=>c});var s=r(5893),t=r(65);function i(e){let n=Object.assign({h1:"h1",code:"code",a:"a",h2:"h2",pre:"pre",p:"p",blockquote:"blockquote",h3:"h3",h4:"h4",div:"div",strong:"strong"},(0,t.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"render-api",children:[(0,s.jsx)(n.code,{children:"render"})," API",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#render-api",children:"#"})]}),"\n",(0,s.jsxs)(n.h2,{id:"render",children:[(0,s.jsx)(n.code,{children:"render"})," function",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#render",children:"#"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"function render(\n  component: React.Element<any>,\n  options?: RenderOptions\n): RenderResult\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"render"})," function is the entry point for writing React Native Testing Library tests. It deeply renders the given React element and returns helpers to query the output components' structure."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"import { render, screen } from '@testing-library/react-native';\n\ntest('basic test', () => {\n  render(<MyApp />);\n  expect(screen.getAllByRole('button', { name: 'start' })).toBeOnTheScreen();\n});\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["When using React context providers, like Redux Provider, you'll likely want to wrap rendered component with them. In such cases, it's convenient to create your own custom\xa0",(0,s.jsx)(n.code,{children:"render"}),"\xa0method. ",(0,s.jsx)(n.a,{href:"https://testing-library.com/docs/react-testing-library/setup#custom-render",target:"_blank",rel:"noopener noreferrer",children:"Follow this great guide on how to set this up"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"options",children:["Options",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#options",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["The behavior of the ",(0,s.jsx)(n.code,{children:"render"})," method can be customized by passing various options as a second argument of the ",(0,s.jsx)(n.code,{children:"RenderOptions"})," type:"]}),"\n",(0,s.jsxs)(n.h4,{id:"wrapper",children:[(0,s.jsx)(n.code,{children:"wrapper"}),(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#wrapper",children:"#"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"wrapper?: React.ComponentType<any>,\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This option allows you to wrap the tested component, passed as the first option to the\xa0",(0,s.jsx)(n.code,{children:"render()"}),"\xa0function, in an additional wrapper component. This is useful for creating reusable custom render functions for common React Context providers."]}),"\n",(0,s.jsxs)(n.h4,{id:"concurrent-root",children:[(0,s.jsx)(n.code,{children:"concurrentRoot"}),(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#concurrent-root",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["Set to ",(0,s.jsx)(n.code,{children:"false"})," to disable concurrent rendering.\nOtherwise, ",(0,s.jsx)(n.code,{children:"render"})," will default to using concurrent rendering used in the React Native New Architecture."]}),"\n",(0,s.jsxs)(n.h4,{id:"create-node-mock",children:[(0,s.jsx)(n.code,{children:"createNodeMock"}),(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#create-node-mock",children:"#"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"createNodeMock?: (element: React.Element) => unknown,\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This option allows you to pass ",(0,s.jsx)(n.code,{children:"createNodeMock"})," option to ",(0,s.jsx)(n.code,{children:"ReactTestRenderer.create()"})," method in order to allow for custom mock refs. You can learn more about this option from ",(0,s.jsx)(n.a,{href:"https://reactjs.org/docs/test-renderer.html#ideas",target:"_blank",rel:"noopener noreferrer",children:"React Test Renderer documentation"}),"."]}),"\n",(0,s.jsxs)(n.h4,{id:"unstable_validatestringsrenderedwithintext",children:[(0,s.jsx)(n.code,{children:"unstable_validateStringsRenderedWithinText"}),(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#unstable_validatestringsrenderedwithintext",children:"#"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"unstable_validateStringsRenderedWithinText?: boolean;\n"})}),"\n",(0,s.jsxs)(n.div,{className:"rspress-directive note",children:[(0,s.jsx)(n.div,{className:"rspress-directive-title",children:"NOTE"}),(0,s.jsx)(n.div,{className:"rspress-directive-content",children:(0,s.jsxs)(n.p,{children:["This options is experimental, in some cases it might not work as intended, and its behavior might change without observing ",(0,s.jsx)(n.a,{href:"https://semver.org/",target:"_blank",rel:"noopener noreferrer",children:"SemVer"})," requirements for breaking changes.\n"]})})]}),"\n",(0,s.jsxs)(n.p,{children:["This ",(0,s.jsx)(n.strong,{children:"experimental"})," option allows you to replicate React Native behavior of throwing ",(0,s.jsx)(n.code,{children:"Invariant Violation: Text strings must be rendered within a <Text> component"})," error when you try to render ",(0,s.jsx)(n.code,{children:"string"})," value under components different than ",(0,s.jsx)(n.code,{children:"<Text>"}),", e.g., under ",(0,s.jsx)(n.code,{children:"<View>"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"React Test Renderer does not enforce this check; hence, by default, React Native Testing Library also does not check this. That might result in runtime errors when running your code on a device, while the code works without errors in tests."}),"\n",(0,s.jsxs)(n.h3,{id:"result",children:["Result",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#result",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"render"})," function returns the same queries and utilities as the ",(0,s.jsx)(n.a,{href:"/docs/api/screen",children:(0,s.jsx)(n.code,{children:"screen"})})," object. We recommended using the ",(0,s.jsx)(n.code,{children:"screen"})," object as more developer-friendly way."]}),"\n",(0,s.jsxs)(n.p,{children:["See ",(0,s.jsx)(n.a,{href:"https://kentcdodds.com/blog/common-mistakes-with-react-testing-library#not-using-screen",target:"_blank",rel:"noopener noreferrer",children:"this article"})," from Kent C. Dodds for more details."]}),"\n",(0,s.jsxs)(n.h2,{id:"render-async",children:[(0,s.jsx)(n.code,{children:"renderAsync"})," function",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#render-async",children:"#"})]}),"\n",(0,s.jsxs)(n.div,{className:"rspress-directive info",children:[(0,s.jsx)(n.div,{className:"rspress-directive-title",children:"RNTL minimal version"}),(0,s.jsxs)(n.div,{className:"rspress-directive-content",children:["\n",(0,s.jsx)(n.p,{children:"This API requires RNTL v13.3.0 or later."}),"\n"]})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"async function renderAsync(\n  component: React.Element<any>,\n  options?: RenderAsyncOptions\n): Promise<RenderAsyncResult>;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"renderAsync"})," function is the async version of ",(0,s.jsx)(n.a,{href:"#render",children:(0,s.jsx)(n.code,{children:"render"})})," designed for working with React 19 and React Suspense. This function uses async ",(0,s.jsx)(n.code,{children:"act"})," function internally to ensure all pending React updates are executed during rendering."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"import { renderAsync, screen } from '@testing-library/react-native';\n\ntest('async component test', async () => {\n  await renderAsync(<MyAsyncApp />);\n  expect(screen.getAllByRole('button', { name: 'start' })).toBeOnTheScreen();\n});\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"options-1",children:["Options",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#options-1",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"renderAsync"})," accepts the same options as ",(0,s.jsx)(n.code,{children:"render"}),"."]}),"\n",(0,s.jsxs)(n.h3,{id:"result-1",children:["Result",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#result-1",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"renderAsync"})," function returns a promise that resolves to the same queries and utilities as the ",(0,s.jsx)(n.a,{href:"/docs/api/screen",children:(0,s.jsx)(n.code,{children:"screen"})})," object. We recommend using the ",(0,s.jsx)(n.code,{children:"screen"})," object for queries and the lifecycle methods from the render result when needed."]}),"\n",(0,s.jsxs)(n.div,{className:"rspress-directive warning",children:[(0,s.jsx)(n.div,{className:"rspress-directive-title",children:"Async lifecycle methods"}),(0,s.jsxs)(n.div,{className:"rspress-directive-content",children:["\n",(0,s.jsxs)(n.p,{children:["When using ",(0,s.jsx)(n.code,{children:"renderAsync"}),", you have to use correspodning lifecycle methods: ",(0,s.jsx)(n.code,{children:"rerenderAsync"})," and ",(0,s.jsx)(n.code,{children:"unmountAsync"})," instead of their sync versions."]}),"\n"]})]})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(i,{...e})}):i(e)}let c=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["13.x%2Fdocs%2Fapi%2Frender.mdx"]={toc:[{text:"`render` function",id:"render",depth:2},{text:"Options",id:"options",depth:3},{text:"`wrapper`",id:"wrapper",depth:4},{text:"`concurrentRoot`",id:"concurrent-root",depth:4},{text:"`createNodeMock`",id:"create-node-mock",depth:4},{text:"`unstable_validateStringsRenderedWithinText`",id:"unstable_validatestringsrenderedwithintext",depth:4},{text:"Result",id:"result",depth:3},{text:"`renderAsync` function",id:"render-async",depth:2},{text:"Options",id:"options-1",depth:3},{text:"Result",id:"result-1",depth:3}],title:"`render` API",headingTitle:"`render` API",frontmatter:{}}}}]);